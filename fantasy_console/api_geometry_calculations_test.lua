local agc = require "api_geometry_calculations"
local g = require "globals"
local luaunit = require "luaunit"


--[[ Start of TestGeometryCalculations ]]

TestGeometryCalculations = {}


function TestGeometryCalculations.setUp()
    g.screen.gamepixel.w = 5
    g.screen.gamepixel.h = 5
end


-- Start of test_pset

function TestGeometryCalculations.test_pset__should_return_correct_coords__when_passed_correct_arguments()
    local expected_result = {{x = 20, y = 25}}

    local given_result = agc.pset(4, 5)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_line

function TestGeometryCalculations.test_line__should_return_correct_coords__when_calculating_horizontal_line()
    local expected_result = {
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25},
        {x = 45, y = 25},
        {x = 50, y = 25}
    }

    local given_result = agc.line(5, 5, 10, 5)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_line__should_return_correct_coords__when_calculating_vertical_line()
    local expected_result = {
        {x = 25, y = 25},
        {x = 25, y = 30},
        {x = 25, y = 35},
        {x = 25, y = 40},
        {x = 25, y = 45},
        {x = 25, y = 50}
    }

    local given_result = agc.line(5, 5, 5, 10)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_line__should_return_correct_coords__when_calculating_diagonal_line()
    local expected_result = {
        {x = 25, y = 25},
        {x = 30, y = 30},
        {x = 35, y = 35},
        {x = 40, y = 40},
        {x = 45, y = 45},
        {x = 50, y = 50}
    }

    local given_result = agc.line(5, 5, 10, 10)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_line__should_return_correct_coords__when_calculating_skewed_line()
    local expected_result = {
        {x = 25, y = 25},
        {x = 30, y = 30},
        {x = 30, y = 35},
        {x = 35, y = 40},
        {x = 40, y = 45},
        {x = 45, y = 50},
        {x = 45, y = 55},
        {x = 50, y = 60}
    }

    local given_result = agc.line(5, 5, 10, 12)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_rect

function TestGeometryCalculations.test_rect__should_return_correct_anchor_point_and_dimensions__when_calculating_square()
    local expected_result = {
        lx = 27.5,
        ly = 27.5,
        lw = 20,
        lh = 20
    }

    local given_result = agc.rect(5, 5, 5, 5)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rect__should_return_correct_anchor_point_and_dimensions__when_calculating_long_rect()
    local expected_result = {
        lx = 52.5,
        ly = 52.5,
        lw = 95,
        lh = 20
    }

    local given_result = agc.rect(10, 10, 20, 5)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rect__should_return_correct_anchor_point_and_dimensions__when_calculating_high_rect()
    local expected_result = {
        lx = 7.5,
        ly = 17.5,
        lw = 20,
        lh = 70
    }

    local given_result = agc.rect(1, 3, 5, 15)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rect__should_return_correct_anchor_point_and_dimensions__when_calculating_tinies_possible_rect()
    local expected_result = {
        lx = 27.5,
        ly = 27.5,
        lw = 0,
        lh = 0
    }

    print("If API function is called with `1` for `w` and `h` parameters,")
    print("it will not print rectangle at all. It is expected tradeoff.")

    local given_result = agc.rect(5, 5, 1, 1)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_rectfill

function TestGeometryCalculations.test_rectfill__should_return_correct_anchor_point_and_dimensions__when_calculating_square()
    local expected_result = {
        lx = 25,
        ly = 25,
        lw = 25,
        lh = 25
    }

    local given_result = agc.rectfill(5, 5, 5, 5)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rectfill__should_return_correct_anchor_point_and_dimensions__when_calculating_long_rect()
    local expected_result = {
        lx = 50,
        ly = 50,
        lw = 100,
        lh = 25
    }

    local given_result = agc.rectfill(10, 10, 20, 5)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rectfill__should_return_correct_anchor_point_and_dimensions__when_calculating_high_rect()
    local expected_result = {
        lx = 5,
        ly = 15,
        lw = 25,
        lh = 75
    }

    local given_result = agc.rectfill(1, 3, 5, 15)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_rectfill__should_return_correct_anchor_point_and_dimensions__when_calculating_tinies_possible_rect()
    local expected_result = {
        lx = 25,
        ly = 25,
        lw = 5,
        lh = 5
    }

    print("Yes, `rectfill` behaviour is a tiny bit inconsistent with")
    print("`rect` behaviour")

    local given_result = agc.rectfill(5, 5, 1, 1)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_circ

function TestGeometryCalculations.test_circ__should_return_correct_coords__when_calculating_tiny_circle()
    local expected_result = {
        {x = 55, y = 50},
        {x = 45, y = 50},
        {x = 55, y = 50},
        {x = 45, y = 50},
        {x = 50, y = 55},
        {x = 50, y = 55},
        {x = 50, y = 45},
        {x = 50, y = 45}
    }

    local given_result = agc.circ(10, 10, 1)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_circ__should_return_correct_coords__when_calculating_large_circle()
    -- Of course I did not calculate all these coords myself.
    -- I generated a circle, checked, if it is drawn correctly,
    -- the I copied the coords there.
    -- It means that this test is not the best one, because it doesn't
    -- really check if function works correctly, but at least
    -- it will catch the moment when the behaviour changes unexpectly.
    local expected_result = {
        {x = 400, y = 250},
        {x = 100, y = 250},
        {x = 400, y = 250},
        {x = 100, y = 250},
        {x = 250, y = 400},
        {x = 250, y = 400},
        {x = 250, y = 100},
        {x = 250, y = 100},
        {x = 400, y = 255},
        {x = 100, y = 255},
        {x = 400, y = 245},
        {x = 100, y = 245},
        {x = 255, y = 400},
        {x = 245, y = 400},
        {x = 255, y = 100},
        {x = 245, y = 100},
        {x = 400, y = 260},
        {x = 100, y = 260},
        {x = 400, y = 240},
        {x = 100, y = 240},
        {x = 260, y = 400},
        {x = 240, y = 400},
        {x = 260, y = 100},
        {x = 240, y = 100},
        {x = 400, y = 265},
        {x = 100, y = 265},
        {x = 400, y = 235},
        {x = 100, y = 235},
        {x = 265, y = 400},
        {x = 235, y = 400},
        {x = 265, y = 100},
        {x = 235, y = 100},
        {x = 400, y = 270},
        {x = 100, y = 270},
        {x = 400, y = 230},
        {x = 100, y = 230},
        {x = 270, y = 400},
        {x = 230, y = 400},
        {x = 270, y = 100},
        {x = 230, y = 100},
        {x = 400, y = 275},
        {x = 100, y = 275},
        {x = 400, y = 225},
        {x = 100, y = 225},
        {x = 275, y = 400},
        {x = 225, y = 400},
        {x = 275, y = 100},
        {x = 225, y = 100},
        {x = 395, y = 280},
        {x = 105, y = 280},
        {x = 395, y = 220},
        {x = 105, y = 220},
        {x = 280, y = 395},
        {x = 220, y = 395},
        {x = 280, y = 105},
        {x = 220, y = 105},
        {x = 395, y = 285},
        {x = 105, y = 285},
        {x = 395, y = 215},
        {x = 105, y = 215},
        {x = 285, y = 395},
        {x = 215, y = 395},
        {x = 285, y = 105},
        {x = 215, y = 105},
        {x = 395, y = 290},
        {x = 105, y = 290},
        {x = 395, y = 210},
        {x = 105, y = 210},
        {x = 290, y = 395},
        {x = 210, y = 395},
        {x = 290, y = 105},
        {x = 210, y = 105},
        {x = 395, y = 295},
        {x = 105, y = 295},
        {x = 395, y = 205},
        {x = 105, y = 205},
        {x = 295, y = 395},
        {x = 205, y = 395},
        {x = 295, y = 105},
        {x = 205, y = 105},
        {x = 390, y = 300},
        {x = 110, y = 300},
        {x = 390, y = 200},
        {x = 110, y = 200},
        {x = 300, y = 390},
        {x = 200, y = 390},
        {x = 300, y = 110},
        {x = 200, y = 110},
        {x = 390, y = 305},
        {x = 110, y = 305},
        {x = 390, y = 195},
        {x = 110, y = 195},
        {x = 305, y = 390},
        {x = 195, y = 390},
        {x = 305, y = 110},
        {x = 195, y = 110},
        {x = 385, y = 310},
        {x = 115, y = 310},
        {x = 385, y = 190},
        {x = 115, y = 190},
        {x = 310, y = 385},
        {x = 190, y = 385},
        {x = 310, y = 115},
        {x = 190, y = 115},
        {x = 385, y = 315},
        {x = 115, y = 315},
        {x = 385, y = 185},
        {x = 115, y = 185},
        {x = 315, y = 385},
        {x = 185, y = 385},
        {x = 315, y = 115},
        {x = 185, y = 115},
        {x = 385, y = 320},
        {x = 115, y = 320},
        {x = 385, y = 180},
        {x = 115, y = 180},
        {x = 320, y = 385},
        {x = 180, y = 385},
        {x = 320, y = 115},
        {x = 180, y = 115},
        {x = 380, y = 325},
        {x = 120, y = 325},
        {x = 380, y = 175},
        {x = 120, y = 175},
        {x = 325, y = 380},
        {x = 175, y = 380},
        {x = 325, y = 120},
        {x = 175, y = 120},
        {x = 375, y = 330},
        {x = 125, y = 330},
        {x = 375, y = 170},
        {x = 125, y = 170},
        {x = 330, y = 375},
        {x = 170, y = 375},
        {x = 330, y = 125},
        {x = 170, y = 125},
        {x = 375, y = 335},
        {x = 125, y = 335},
        {x = 375, y = 165},
        {x = 125, y = 165},
        {x = 335, y = 375},
        {x = 165, y = 375},
        {x = 335, y = 125},
        {x = 165, y = 125},
        {x = 370, y = 340},
        {x = 130, y = 340},
        {x = 370, y = 160},
        {x = 130, y = 160},
        {x = 340, y = 370},
        {x = 160, y = 370},
        {x = 340, y = 130},
        {x = 160, y = 130},
        {x = 365, y = 345},
        {x = 135, y = 345},
        {x = 365, y = 155},
        {x = 135, y = 155},
        {x = 345, y = 365},
        {x = 155, y = 365},
        {x = 345, y = 135},
        {x = 155, y = 135},
        {x = 360, y = 350},
        {x = 140, y = 350},
        {x = 360, y = 150},
        {x = 140, y = 150},
        {x = 350, y = 360},
        {x = 150, y = 360},
        {x = 350, y = 140},
        {x = 150, y = 140},
        {x = 355, y = 355},
        {x = 145, y = 355},
        {x = 355, y = 145},
        {x = 145, y = 145},
        {x = 355, y = 355},
        {x = 145, y = 355},
        {x = 355, y = 145},
        {x = 145, y = 145}
    }

    local given_result = agc.circ(50, 50, 30)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_circfill

function TestGeometryCalculations.test_circfill____should_return_correct_coords__when_calculating_tiny_circle()
    local expected_result = {
        {x = 55, y = 50},
        {x = 45, y = 50},
        {x = 55, y = 50},
        {x = 45, y = 50},
        {x = 50, y = 55},
        {x = 50, y = 55},
        {x = 50, y = 45},
        {x = 50, y = 45},
        {x = 50, y = 45},
        {x = 45, y = 50},
        {x = 50, y = 50},
        {x = 55, y = 50},
        {x = 50, y = 55}
    }

    local given_result = agc.circfill(10, 10, 1)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_circfill__should_return_correct_coords__when_calculating_large_circle()
    -- Of course I did not calculate all these coords myself.
    -- I generated an oval, checked, if it is drawn correctly,
    -- the I copied the coords there.
    -- It means that this test is not the best one, because it doesn't
    -- really check if function works correctly, but at least
    -- it will catch the moment when the behaviour changes unexpectly.
    local expected_result = {
        {x = 325, y = 250},
        {x = 175, y = 250},
        {x = 325, y = 250},
        {x = 175, y = 250},
        {x = 250, y = 325},
        {x = 250, y = 325},
        {x = 250, y = 175},
        {x = 250, y = 175},
        {x = 325, y = 255},
        {x = 175, y = 255},
        {x = 325, y = 245},
        {x = 175, y = 245},
        {x = 255, y = 325},
        {x = 245, y = 325},
        {x = 255, y = 175},
        {x = 245, y = 175},
        {x = 325, y = 260},
        {x = 175, y = 260},
        {x = 325, y = 240},
        {x = 175, y = 240},
        {x = 260, y = 325},
        {x = 240, y = 325},
        {x = 260, y = 175},
        {x = 240, y = 175},
        {x = 325, y = 265},
        {x = 175, y = 265},
        {x = 325, y = 235},
        {x = 175, y = 235},
        {x = 265, y = 325},
        {x = 235, y = 325},
        {x = 265, y = 175},
        {x = 235, y = 175},
        {x = 320, y = 270},
        {x = 180, y = 270},
        {x = 320, y = 230},
        {x = 180, y = 230},
        {x = 270, y = 320},
        {x = 230, y = 320},
        {x = 270, y = 180},
        {x = 230, y = 180},
        {x = 320, y = 275},
        {x = 180, y = 275},
        {x = 320, y = 225},
        {x = 180, y = 225},
        {x = 275, y = 320},
        {x = 225, y = 320},
        {x = 275, y = 180},
        {x = 225, y = 180},
        {x = 320, y = 280},
        {x = 180, y = 280},
        {x = 320, y = 220},
        {x = 180, y = 220},
        {x = 280, y = 320},
        {x = 220, y = 320},
        {x = 280, y = 180},
        {x = 220, y = 180},
        {x = 315, y = 285},
        {x = 185, y = 285},
        {x = 315, y = 215},
        {x = 185, y = 215},
        {x = 285, y = 315},
        {x = 215, y = 315},
        {x = 285, y = 185},
        {x = 215, y = 185},
        {x = 315, y = 290},
        {x = 185, y = 290},
        {x = 315, y = 210},
        {x = 185, y = 210},
        {x = 290, y = 315},
        {x = 210, y = 315},
        {x = 290, y = 185},
        {x = 210, y = 185},
        {x = 310, y = 295},
        {x = 190, y = 295},
        {x = 310, y = 205},
        {x = 190, y = 205},
        {x = 295, y = 310},
        {x = 205, y = 310},
        {x = 295, y = 190},
        {x = 205, y = 190},
        {x = 305, y = 300},
        {x = 195, y = 300},
        {x = 305, y = 200},
        {x = 195, y = 200},
        {x = 300, y = 305},
        {x = 200, y = 305},
        {x = 300, y = 195},
        {x = 200, y = 195},
        {x = 250, y = 175},
        {x = 225, y = 180},
        {x = 230, y = 180},
        {x = 235, y = 180},
        {x = 240, y = 180},
        {x = 245, y = 180},
        {x = 250, y = 180},
        {x = 255, y = 180},
        {x = 260, y = 180},
        {x = 265, y = 180},
        {x = 270, y = 180},
        {x = 275, y = 180},
        {x = 215, y = 185},
        {x = 220, y = 185},
        {x = 225, y = 185},
        {x = 230, y = 185},
        {x = 235, y = 185},
        {x = 240, y = 185},
        {x = 245, y = 185},
        {x = 250, y = 185},
        {x = 255, y = 185},
        {x = 260, y = 185},
        {x = 265, y = 185},
        {x = 270, y = 185},
        {x = 275, y = 185},
        {x = 280, y = 185},
        {x = 285, y = 185},
        {x = 205, y = 190},
        {x = 210, y = 190},
        {x = 215, y = 190},
        {x = 220, y = 190},
        {x = 225, y = 190},
        {x = 230, y = 190},
        {x = 235, y = 190},
        {x = 240, y = 190},
        {x = 245, y = 190},
        {x = 250, y = 190},
        {x = 255, y = 190},
        {x = 260, y = 190},
        {x = 265, y = 190},
        {x = 270, y = 190},
        {x = 275, y = 190},
        {x = 280, y = 190},
        {x = 285, y = 190},
        {x = 290, y = 190},
        {x = 295, y = 190},
        {x = 200, y = 195},
        {x = 205, y = 195},
        {x = 210, y = 195},
        {x = 215, y = 195},
        {x = 220, y = 195},
        {x = 225, y = 195},
        {x = 230, y = 195},
        {x = 235, y = 195},
        {x = 240, y = 195},
        {x = 245, y = 195},
        {x = 250, y = 195},
        {x = 255, y = 195},
        {x = 260, y = 195},
        {x = 265, y = 195},
        {x = 270, y = 195},
        {x = 275, y = 195},
        {x = 280, y = 195},
        {x = 285, y = 195},
        {x = 290, y = 195},
        {x = 295, y = 195},
        {x = 300, y = 195},
        {x = 195, y = 200},
        {x = 200, y = 200},
        {x = 205, y = 200},
        {x = 210, y = 200},
        {x = 215, y = 200},
        {x = 220, y = 200},
        {x = 225, y = 200},
        {x = 230, y = 200},
        {x = 235, y = 200},
        {x = 240, y = 200},
        {x = 245, y = 200},
        {x = 250, y = 200},
        {x = 255, y = 200},
        {x = 260, y = 200},
        {x = 265, y = 200},
        {x = 270, y = 200},
        {x = 275, y = 200},
        {x = 280, y = 200},
        {x = 285, y = 200},
        {x = 290, y = 200},
        {x = 295, y = 200},
        {x = 300, y = 200},
        {x = 305, y = 200},
        {x = 190, y = 205},
        {x = 195, y = 205},
        {x = 200, y = 205},
        {x = 205, y = 205},
        {x = 210, y = 205},
        {x = 215, y = 205},
        {x = 220, y = 205},
        {x = 225, y = 205},
        {x = 230, y = 205},
        {x = 235, y = 205},
        {x = 240, y = 205},
        {x = 245, y = 205},
        {x = 250, y = 205},
        {x = 255, y = 205},
        {x = 260, y = 205},
        {x = 265, y = 205},
        {x = 270, y = 205},
        {x = 275, y = 205},
        {x = 280, y = 205},
        {x = 285, y = 205},
        {x = 290, y = 205},
        {x = 295, y = 205},
        {x = 300, y = 205},
        {x = 305, y = 205},
        {x = 310, y = 205},
        {x = 190, y = 210},
        {x = 195, y = 210},
        {x = 200, y = 210},
        {x = 205, y = 210},
        {x = 210, y = 210},
        {x = 215, y = 210},
        {x = 220, y = 210},
        {x = 225, y = 210},
        {x = 230, y = 210},
        {x = 235, y = 210},
        {x = 240, y = 210},
        {x = 245, y = 210},
        {x = 250, y = 210},
        {x = 255, y = 210},
        {x = 260, y = 210},
        {x = 265, y = 210},
        {x = 270, y = 210},
        {x = 275, y = 210},
        {x = 280, y = 210},
        {x = 285, y = 210},
        {x = 290, y = 210},
        {x = 295, y = 210},
        {x = 300, y = 210},
        {x = 305, y = 210},
        {x = 310, y = 210},
        {x = 185, y = 215},
        {x = 190, y = 215},
        {x = 195, y = 215},
        {x = 200, y = 215},
        {x = 205, y = 215},
        {x = 210, y = 215},
        {x = 215, y = 215},
        {x = 220, y = 215},
        {x = 225, y = 215},
        {x = 230, y = 215},
        {x = 235, y = 215},
        {x = 240, y = 215},
        {x = 245, y = 215},
        {x = 250, y = 215},
        {x = 255, y = 215},
        {x = 260, y = 215},
        {x = 265, y = 215},
        {x = 270, y = 215},
        {x = 275, y = 215},
        {x = 280, y = 215},
        {x = 285, y = 215},
        {x = 290, y = 215},
        {x = 295, y = 215},
        {x = 300, y = 215},
        {x = 305, y = 215},
        {x = 310, y = 215},
        {x = 315, y = 215},
        {x = 185, y = 220},
        {x = 190, y = 220},
        {x = 195, y = 220},
        {x = 200, y = 220},
        {x = 205, y = 220},
        {x = 210, y = 220},
        {x = 215, y = 220},
        {x = 220, y = 220},
        {x = 225, y = 220},
        {x = 230, y = 220},
        {x = 235, y = 220},
        {x = 240, y = 220},
        {x = 245, y = 220},
        {x = 250, y = 220},
        {x = 255, y = 220},
        {x = 260, y = 220},
        {x = 265, y = 220},
        {x = 270, y = 220},
        {x = 275, y = 220},
        {x = 280, y = 220},
        {x = 285, y = 220},
        {x = 290, y = 220},
        {x = 295, y = 220},
        {x = 300, y = 220},
        {x = 305, y = 220},
        {x = 310, y = 220},
        {x = 315, y = 220},
        {x = 180, y = 225},
        {x = 185, y = 225},
        {x = 190, y = 225},
        {x = 195, y = 225},
        {x = 200, y = 225},
        {x = 205, y = 225},
        {x = 210, y = 225},
        {x = 215, y = 225},
        {x = 220, y = 225},
        {x = 225, y = 225},
        {x = 230, y = 225},
        {x = 235, y = 225},
        {x = 240, y = 225},
        {x = 245, y = 225},
        {x = 250, y = 225},
        {x = 255, y = 225},
        {x = 260, y = 225},
        {x = 265, y = 225},
        {x = 270, y = 225},
        {x = 275, y = 225},
        {x = 280, y = 225},
        {x = 285, y = 225},
        {x = 290, y = 225},
        {x = 295, y = 225},
        {x = 300, y = 225},
        {x = 305, y = 225},
        {x = 310, y = 225},
        {x = 315, y = 225},
        {x = 320, y = 225},
        {x = 180, y = 230},
        {x = 185, y = 230},
        {x = 190, y = 230},
        {x = 195, y = 230},
        {x = 200, y = 230},
        {x = 205, y = 230},
        {x = 210, y = 230},
        {x = 215, y = 230},
        {x = 220, y = 230},
        {x = 225, y = 230},
        {x = 230, y = 230},
        {x = 235, y = 230},
        {x = 240, y = 230},
        {x = 245, y = 230},
        {x = 250, y = 230},
        {x = 255, y = 230},
        {x = 260, y = 230},
        {x = 265, y = 230},
        {x = 270, y = 230},
        {x = 275, y = 230},
        {x = 280, y = 230},
        {x = 285, y = 230},
        {x = 290, y = 230},
        {x = 295, y = 230},
        {x = 300, y = 230},
        {x = 305, y = 230},
        {x = 310, y = 230},
        {x = 315, y = 230},
        {x = 320, y = 230},
        {x = 180, y = 235},
        {x = 185, y = 235},
        {x = 190, y = 235},
        {x = 195, y = 235},
        {x = 200, y = 235},
        {x = 205, y = 235},
        {x = 210, y = 235},
        {x = 215, y = 235},
        {x = 220, y = 235},
        {x = 225, y = 235},
        {x = 230, y = 235},
        {x = 235, y = 235},
        {x = 240, y = 235},
        {x = 245, y = 235},
        {x = 250, y = 235},
        {x = 255, y = 235},
        {x = 260, y = 235},
        {x = 265, y = 235},
        {x = 270, y = 235},
        {x = 275, y = 235},
        {x = 280, y = 235},
        {x = 285, y = 235},
        {x = 290, y = 235},
        {x = 295, y = 235},
        {x = 300, y = 235},
        {x = 305, y = 235},
        {x = 310, y = 235},
        {x = 315, y = 235},
        {x = 320, y = 235},
        {x = 180, y = 240},
        {x = 185, y = 240},
        {x = 190, y = 240},
        {x = 195, y = 240},
        {x = 200, y = 240},
        {x = 205, y = 240},
        {x = 210, y = 240},
        {x = 215, y = 240},
        {x = 220, y = 240},
        {x = 225, y = 240},
        {x = 230, y = 240},
        {x = 235, y = 240},
        {x = 240, y = 240},
        {x = 245, y = 240},
        {x = 250, y = 240},
        {x = 255, y = 240},
        {x = 260, y = 240},
        {x = 265, y = 240},
        {x = 270, y = 240},
        {x = 275, y = 240},
        {x = 280, y = 240},
        {x = 285, y = 240},
        {x = 290, y = 240},
        {x = 295, y = 240},
        {x = 300, y = 240},
        {x = 305, y = 240},
        {x = 310, y = 240},
        {x = 315, y = 240},
        {x = 320, y = 240},
        {x = 180, y = 245},
        {x = 185, y = 245},
        {x = 190, y = 245},
        {x = 195, y = 245},
        {x = 200, y = 245},
        {x = 205, y = 245},
        {x = 210, y = 245},
        {x = 215, y = 245},
        {x = 220, y = 245},
        {x = 225, y = 245},
        {x = 230, y = 245},
        {x = 235, y = 245},
        {x = 240, y = 245},
        {x = 245, y = 245},
        {x = 250, y = 245},
        {x = 255, y = 245},
        {x = 260, y = 245},
        {x = 265, y = 245},
        {x = 270, y = 245},
        {x = 275, y = 245},
        {x = 280, y = 245},
        {x = 285, y = 245},
        {x = 290, y = 245},
        {x = 295, y = 245},
        {x = 300, y = 245},
        {x = 305, y = 245},
        {x = 310, y = 245},
        {x = 315, y = 245},
        {x = 320, y = 245},
        {x = 175, y = 250},
        {x = 180, y = 250},
        {x = 185, y = 250},
        {x = 190, y = 250},
        {x = 195, y = 250},
        {x = 200, y = 250},
        {x = 205, y = 250},
        {x = 210, y = 250},
        {x = 215, y = 250},
        {x = 220, y = 250},
        {x = 225, y = 250},
        {x = 230, y = 250},
        {x = 235, y = 250},
        {x = 240, y = 250},
        {x = 245, y = 250},
        {x = 250, y = 250},
        {x = 255, y = 250},
        {x = 260, y = 250},
        {x = 265, y = 250},
        {x = 270, y = 250},
        {x = 275, y = 250},
        {x = 280, y = 250},
        {x = 285, y = 250},
        {x = 290, y = 250},
        {x = 295, y = 250},
        {x = 300, y = 250},
        {x = 305, y = 250},
        {x = 310, y = 250},
        {x = 315, y = 250},
        {x = 320, y = 250},
        {x = 325, y = 250},
        {x = 180, y = 255},
        {x = 185, y = 255},
        {x = 190, y = 255},
        {x = 195, y = 255},
        {x = 200, y = 255},
        {x = 205, y = 255},
        {x = 210, y = 255},
        {x = 215, y = 255},
        {x = 220, y = 255},
        {x = 225, y = 255},
        {x = 230, y = 255},
        {x = 235, y = 255},
        {x = 240, y = 255},
        {x = 245, y = 255},
        {x = 250, y = 255},
        {x = 255, y = 255},
        {x = 260, y = 255},
        {x = 265, y = 255},
        {x = 270, y = 255},
        {x = 275, y = 255},
        {x = 280, y = 255},
        {x = 285, y = 255},
        {x = 290, y = 255},
        {x = 295, y = 255},
        {x = 300, y = 255},
        {x = 305, y = 255},
        {x = 310, y = 255},
        {x = 315, y = 255},
        {x = 320, y = 255},
        {x = 180, y = 260},
        {x = 185, y = 260},
        {x = 190, y = 260},
        {x = 195, y = 260},
        {x = 200, y = 260},
        {x = 205, y = 260},
        {x = 210, y = 260},
        {x = 215, y = 260},
        {x = 220, y = 260},
        {x = 225, y = 260},
        {x = 230, y = 260},
        {x = 235, y = 260},
        {x = 240, y = 260},
        {x = 245, y = 260},
        {x = 250, y = 260},
        {x = 255, y = 260},
        {x = 260, y = 260},
        {x = 265, y = 260},
        {x = 270, y = 260},
        {x = 275, y = 260},
        {x = 280, y = 260},
        {x = 285, y = 260},
        {x = 290, y = 260},
        {x = 295, y = 260},
        {x = 300, y = 260},
        {x = 305, y = 260},
        {x = 310, y = 260},
        {x = 315, y = 260},
        {x = 320, y = 260},
        {x = 180, y = 265},
        {x = 185, y = 265},
        {x = 190, y = 265},
        {x = 195, y = 265},
        {x = 200, y = 265},
        {x = 205, y = 265},
        {x = 210, y = 265},
        {x = 215, y = 265},
        {x = 220, y = 265},
        {x = 225, y = 265},
        {x = 230, y = 265},
        {x = 235, y = 265},
        {x = 240, y = 265},
        {x = 245, y = 265},
        {x = 250, y = 265},
        {x = 255, y = 265},
        {x = 260, y = 265},
        {x = 265, y = 265},
        {x = 270, y = 265},
        {x = 275, y = 265},
        {x = 280, y = 265},
        {x = 285, y = 265},
        {x = 290, y = 265},
        {x = 295, y = 265},
        {x = 300, y = 265},
        {x = 305, y = 265},
        {x = 310, y = 265},
        {x = 315, y = 265},
        {x = 320, y = 265},
        {x = 180, y = 270},
        {x = 185, y = 270},
        {x = 190, y = 270},
        {x = 195, y = 270},
        {x = 200, y = 270},
        {x = 205, y = 270},
        {x = 210, y = 270},
        {x = 215, y = 270},
        {x = 220, y = 270},
        {x = 225, y = 270},
        {x = 230, y = 270},
        {x = 235, y = 270},
        {x = 240, y = 270},
        {x = 245, y = 270},
        {x = 250, y = 270},
        {x = 255, y = 270},
        {x = 260, y = 270},
        {x = 265, y = 270},
        {x = 270, y = 270},
        {x = 275, y = 270},
        {x = 280, y = 270},
        {x = 285, y = 270},
        {x = 290, y = 270},
        {x = 295, y = 270},
        {x = 300, y = 270},
        {x = 305, y = 270},
        {x = 310, y = 270},
        {x = 315, y = 270},
        {x = 320, y = 270},
        {x = 180, y = 275},
        {x = 185, y = 275},
        {x = 190, y = 275},
        {x = 195, y = 275},
        {x = 200, y = 275},
        {x = 205, y = 275},
        {x = 210, y = 275},
        {x = 215, y = 275},
        {x = 220, y = 275},
        {x = 225, y = 275},
        {x = 230, y = 275},
        {x = 235, y = 275},
        {x = 240, y = 275},
        {x = 245, y = 275},
        {x = 250, y = 275},
        {x = 255, y = 275},
        {x = 260, y = 275},
        {x = 265, y = 275},
        {x = 270, y = 275},
        {x = 275, y = 275},
        {x = 280, y = 275},
        {x = 285, y = 275},
        {x = 290, y = 275},
        {x = 295, y = 275},
        {x = 300, y = 275},
        {x = 305, y = 275},
        {x = 310, y = 275},
        {x = 315, y = 275},
        {x = 320, y = 275},
        {x = 185, y = 280},
        {x = 190, y = 280},
        {x = 195, y = 280},
        {x = 200, y = 280},
        {x = 205, y = 280},
        {x = 210, y = 280},
        {x = 215, y = 280},
        {x = 220, y = 280},
        {x = 225, y = 280},
        {x = 230, y = 280},
        {x = 235, y = 280},
        {x = 240, y = 280},
        {x = 245, y = 280},
        {x = 250, y = 280},
        {x = 255, y = 280},
        {x = 260, y = 280},
        {x = 265, y = 280},
        {x = 270, y = 280},
        {x = 275, y = 280},
        {x = 280, y = 280},
        {x = 285, y = 280},
        {x = 290, y = 280},
        {x = 295, y = 280},
        {x = 300, y = 280},
        {x = 305, y = 280},
        {x = 310, y = 280},
        {x = 315, y = 280},
        {x = 185, y = 285},
        {x = 190, y = 285},
        {x = 195, y = 285},
        {x = 200, y = 285},
        {x = 205, y = 285},
        {x = 210, y = 285},
        {x = 215, y = 285},
        {x = 220, y = 285},
        {x = 225, y = 285},
        {x = 230, y = 285},
        {x = 235, y = 285},
        {x = 240, y = 285},
        {x = 245, y = 285},
        {x = 250, y = 285},
        {x = 255, y = 285},
        {x = 260, y = 285},
        {x = 265, y = 285},
        {x = 270, y = 285},
        {x = 275, y = 285},
        {x = 280, y = 285},
        {x = 285, y = 285},
        {x = 290, y = 285},
        {x = 295, y = 285},
        {x = 300, y = 285},
        {x = 305, y = 285},
        {x = 310, y = 285},
        {x = 315, y = 285},
        {x = 190, y = 290},
        {x = 195, y = 290},
        {x = 200, y = 290},
        {x = 205, y = 290},
        {x = 210, y = 290},
        {x = 215, y = 290},
        {x = 220, y = 290},
        {x = 225, y = 290},
        {x = 230, y = 290},
        {x = 235, y = 290},
        {x = 240, y = 290},
        {x = 245, y = 290},
        {x = 250, y = 290},
        {x = 255, y = 290},
        {x = 260, y = 290},
        {x = 265, y = 290},
        {x = 270, y = 290},
        {x = 275, y = 290},
        {x = 280, y = 290},
        {x = 285, y = 290},
        {x = 290, y = 290},
        {x = 295, y = 290},
        {x = 300, y = 290},
        {x = 305, y = 290},
        {x = 310, y = 290},
        {x = 190, y = 295},
        {x = 195, y = 295},
        {x = 200, y = 295},
        {x = 205, y = 295},
        {x = 210, y = 295},
        {x = 215, y = 295},
        {x = 220, y = 295},
        {x = 225, y = 295},
        {x = 230, y = 295},
        {x = 235, y = 295},
        {x = 240, y = 295},
        {x = 245, y = 295},
        {x = 250, y = 295},
        {x = 255, y = 295},
        {x = 260, y = 295},
        {x = 265, y = 295},
        {x = 270, y = 295},
        {x = 275, y = 295},
        {x = 280, y = 295},
        {x = 285, y = 295},
        {x = 290, y = 295},
        {x = 295, y = 295},
        {x = 300, y = 295},
        {x = 305, y = 295},
        {x = 310, y = 295},
        {x = 195, y = 300},
        {x = 200, y = 300},
        {x = 205, y = 300},
        {x = 210, y = 300},
        {x = 215, y = 300},
        {x = 220, y = 300},
        {x = 225, y = 300},
        {x = 230, y = 300},
        {x = 235, y = 300},
        {x = 240, y = 300},
        {x = 245, y = 300},
        {x = 250, y = 300},
        {x = 255, y = 300},
        {x = 260, y = 300},
        {x = 265, y = 300},
        {x = 270, y = 300},
        {x = 275, y = 300},
        {x = 280, y = 300},
        {x = 285, y = 300},
        {x = 290, y = 300},
        {x = 295, y = 300},
        {x = 300, y = 300},
        {x = 305, y = 300},
        {x = 200, y = 305},
        {x = 205, y = 305},
        {x = 210, y = 305},
        {x = 215, y = 305},
        {x = 220, y = 305},
        {x = 225, y = 305},
        {x = 230, y = 305},
        {x = 235, y = 305},
        {x = 240, y = 305},
        {x = 245, y = 305},
        {x = 250, y = 305},
        {x = 255, y = 305},
        {x = 260, y = 305},
        {x = 265, y = 305},
        {x = 270, y = 305},
        {x = 275, y = 305},
        {x = 280, y = 305},
        {x = 285, y = 305},
        {x = 290, y = 305},
        {x = 295, y = 305},
        {x = 300, y = 305},
        {x = 205, y = 310},
        {x = 210, y = 310},
        {x = 215, y = 310},
        {x = 220, y = 310},
        {x = 225, y = 310},
        {x = 230, y = 310},
        {x = 235, y = 310},
        {x = 240, y = 310},
        {x = 245, y = 310},
        {x = 250, y = 310},
        {x = 255, y = 310},
        {x = 260, y = 310},
        {x = 265, y = 310},
        {x = 270, y = 310},
        {x = 275, y = 310},
        {x = 280, y = 310},
        {x = 285, y = 310},
        {x = 290, y = 310},
        {x = 295, y = 310},
        {x = 215, y = 315},
        {x = 220, y = 315},
        {x = 225, y = 315},
        {x = 230, y = 315},
        {x = 235, y = 315},
        {x = 240, y = 315},
        {x = 245, y = 315},
        {x = 250, y = 315},
        {x = 255, y = 315},
        {x = 260, y = 315},
        {x = 265, y = 315},
        {x = 270, y = 315},
        {x = 275, y = 315},
        {x = 280, y = 315},
        {x = 285, y = 315},
        {x = 225, y = 320},
        {x = 230, y = 320},
        {x = 235, y = 320},
        {x = 240, y = 320},
        {x = 245, y = 320},
        {x = 250, y = 320},
        {x = 255, y = 320},
        {x = 260, y = 320},
        {x = 265, y = 320},
        {x = 270, y = 320},
        {x = 275, y = 320},
        {x = 250, y = 325}
    }

    local given_result = agc.circfill(50, 50, 15)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test_oval

function TestGeometryCalculations.test_oval__should_return_correct_coords__when_calculating_coords_for_oval_with_the_same_rx_and_ry()
    local expected_result = {
        {x = 25, y = 40},
        {x = 25, y = 40},
        {x = 25, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 40},
        {x = 20, y = 40},
        {x = 30, y = 10},
        {x = 20, y = 10},
        {x = 35, y = 35},
        {x = 15, y = 35},
        {x = 35, y = 15},
        {x = 15, y = 15},
        {x = 40, y = 30},
        {x = 10, y = 30},
        {x = 40, y = 20},
        {x = 10, y = 20},
        {x = 40, y = 25},
        {x = 10, y = 25},
        {x = 40, y = 25},
        {x = 10, y = 25}
    }

    local given_result = agc.oval(5, 5, 3, 3)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_oval__should_return_correct_coords__when_calculating_coords_for_oval_with_rx_larger_than_ry()
    local expected_result = {
        {x = 25, y = 40},
        {x = 25, y = 40},
        {x = 25, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 40},
        {x = 20, y = 40},
        {x = 30, y = 10},
        {x = 20, y = 10},
        {x = 35, y = 40},
        {x = 15, y = 40},
        {x = 35, y = 10},
        {x = 15, y = 10},
        {x = 40, y = 35},
        {x = 10, y = 35},
        {x = 40, y = 15},
        {x = 10, y = 15},
        {x = 45, y = 35},
        {x = 5, y = 35},
        {x = 45, y = 15},
        {x = 5, y = 15},
        {x = 50, y = 30},
        {x = 0, y = 30},
        {x = 50, y = 20},
        {x = 0, y = 20},
        {x = 50, y = 25},
        {x = 0, y = 25},
        {x = 50, y = 25},
        {x = 0, y = 25}
    }

    local given_result = agc.oval(5, 5, 5, 3)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_oval__should_return_correct_coords__when_calculating_coords_for_oval_with_rx_smaller_than_ry()
    local expected_result = {
        {x = 25, y = 50},
        {x = 25, y = 50},
        {x = 25, y = 0},
        {x = 25, y = 0},
        {x = 30, y = 50},
        {x = 20, y = 50},
        {x = 30, y = 0},
        {x = 20, y = 0},
        {x = 35, y = 45},
        {x = 15, y = 45},
        {x = 35, y = 5},
        {x = 15, y = 5},
        {x = 35, y = 40},
        {x = 15, y = 40},
        {x = 35, y = 10},
        {x = 15, y = 10},
        {x = 40, y = 35},
        {x = 10, y = 35},
        {x = 40, y = 15},
        {x = 10, y = 15},
        {x = 40, y = 30},
        {x = 10, y = 30},
        {x = 40, y = 20},
        {x = 10, y = 20},
        {x = 40, y = 25},
        {x = 10, y = 25},
        {x = 40, y = 25},
        {x = 10, y = 25}
    }

    local given_result = agc.oval(5, 5, 3, 5)

    luaunit.assertEquals(given_result, expected_result)
end


-- Start of test__ovalfill

function TestGeometryCalculations.test_ovalfill__should_return_correct_coords__when_calculating_coords_for_oval_with_the_same_rx_and_ry()
    -- Of course I did not calculate all these coords myself.
    -- I generated an oval, checked, if it is drawn correctly,
    -- the I copied the coords there.
    -- It means that this test is not the best one, because it doesn't
    -- really check if function works correctly, but at least
    -- it will catch the moment when the behaviour changes unexpectly.
    local expected_result = {
        {x = 25, y = 40},
        {x = 25, y = 10},
        {x = 20, y = 40},
        {x = 25, y = 40},
        {x = 30, y = 40},
        {x = 20, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 10},
        {x = 15, y = 35},
        {x = 20, y = 35},
        {x = 25, y = 35},
        {x = 30, y = 35},
        {x = 35, y = 35},
        {x = 15, y = 15},
        {x = 20, y = 15},
        {x = 25, y = 15},
        {x = 30, y = 15},
        {x = 35, y = 15},
        {x = 10, y = 30},
        {x = 15, y = 30},
        {x = 20, y = 30},
        {x = 25, y = 30},
        {x = 30, y = 30},
        {x = 35, y = 30},
        {x = 40, y = 30},
        {x = 10, y = 20},
        {x = 15, y = 20},
        {x = 20, y = 20},
        {x = 25, y = 20},
        {x = 30, y = 20},
        {x = 35, y = 20},
        {x = 40, y = 20},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25}
    }

    local given_result = agc.ovalfill(5, 5, 3, 3)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_ovalfill__should_return_correct_coords__when_calculating_coords_for_oval_with_rx_larger_than_ry()
    -- Of course I did not calculate all these coords myself.
    -- I generated an oval, checked, if it is drawn correctly,
    -- the I copied the coords there.
    -- It means that this test is not the best one, because it doesn't
    -- really check if function works correctly, but at least
    -- it will catch the moment when the behaviour changes unexpectly.
    local expected_result = {
        {x = 25, y = 40},
        {x = 25, y = 10},
        {x = 20, y = 40},
        {x = 25, y = 40},
        {x = 30, y = 40},
        {x = 20, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 10},
        {x = 15, y = 40},
        {x = 20, y = 40},
        {x = 25, y = 40},
        {x = 30, y = 40},
        {x = 35, y = 40},
        {x = 15, y = 10},
        {x = 20, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 10},
        {x = 35, y = 10},
        {x = 10, y = 35},
        {x = 15, y = 35},
        {x = 20, y = 35},
        {x = 25, y = 35},
        {x = 30, y = 35},
        {x = 35, y = 35},
        {x = 40, y = 35},
        {x = 10, y = 15},
        {x = 15, y = 15},
        {x = 20, y = 15},
        {x = 25, y = 15},
        {x = 30, y = 15},
        {x = 35, y = 15},
        {x = 40, y = 15},
        {x = 5, y = 35},
        {x = 10, y = 35},
        {x = 15, y = 35},
        {x = 20, y = 35},
        {x = 25, y = 35},
        {x = 30, y = 35},
        {x = 35, y = 35},
        {x = 40, y = 35},
        {x = 45, y = 35},
        {x = 5, y = 15},
        {x = 10, y = 15},
        {x = 15, y = 15},
        {x = 20, y = 15},
        {x = 25, y = 15},
        {x = 30, y = 15},
        {x = 35, y = 15},
        {x = 40, y = 15},
        {x = 45, y = 15},
        {x = 0, y = 30},
        {x = 5, y = 30},
        {x = 10, y = 30},
        {x = 15, y = 30},
        {x = 20, y = 30},
        {x = 25, y = 30},
        {x = 30, y = 30},
        {x = 35, y = 30},
        {x = 40, y = 30},
        {x = 45, y = 30},
        {x = 50, y = 30},
        {x = 0, y = 20},
        {x = 5, y = 20},
        {x = 10, y = 20},
        {x = 15, y = 20},
        {x = 20, y = 20},
        {x = 25, y = 20},
        {x = 30, y = 20},
        {x = 35, y = 20},
        {x = 40, y = 20},
        {x = 45, y = 20},
        {x = 50, y = 20},
        {x = 0, y = 25},
        {x = 5, y = 25},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25},
        {x = 45, y = 25},
        {x = 50, y = 25},
        {x = 0, y = 25},
        {x = 5, y = 25},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25},
        {x = 45, y = 25},
        {x = 50, y = 25}
    }

    local given_result = agc.ovalfill(5, 5, 5, 3)

    luaunit.assertEquals(given_result, expected_result)
end


function TestGeometryCalculations.test_ovalfill__should_return_correct_coords__when_calculating_coords_for_oval_with_rx_smaller_than_ry()
    -- Of course I did not calculate all these coords myself.
    -- I generated an oval, checked, if it is drawn correctly,
    -- the I copied the coords there.
    -- It means that this test is not the best one, because it doesn't
    -- really check if function works correctly, but at least
    -- it will catch the moment when the behaviour changes unexpectly.
    local expected_result = {
        {x = 25, y = 50},
        {x = 25, y = 0},
        {x = 20, y = 50},
        {x = 25, y = 50},
        {x = 30, y = 50},
        {x = 20, y = 0},
        {x = 25, y = 0},
        {x = 30, y = 0},
        {x = 15, y = 45},
        {x = 20, y = 45},
        {x = 25, y = 45},
        {x = 30, y = 45},
        {x = 35, y = 45},
        {x = 15, y = 5},
        {x = 20, y = 5},
        {x = 25, y = 5},
        {x = 30, y = 5},
        {x = 35, y = 5},
        {x = 15, y = 40},
        {x = 20, y = 40},
        {x = 25, y = 40},
        {x = 30, y = 40},
        {x = 35, y = 40},
        {x = 15, y = 10},
        {x = 20, y = 10},
        {x = 25, y = 10},
        {x = 30, y = 10},
        {x = 35, y = 10},
        {x = 10, y = 35},
        {x = 15, y = 35},
        {x = 20, y = 35},
        {x = 25, y = 35},
        {x = 30, y = 35},
        {x = 35, y = 35},
        {x = 40, y = 35},
        {x = 10, y = 15},
        {x = 15, y = 15},
        {x = 20, y = 15},
        {x = 25, y = 15},
        {x = 30, y = 15},
        {x = 35, y = 15},
        {x = 40, y = 15},
        {x = 10, y = 30},
        {x = 15, y = 30},
        {x = 20, y = 30},
        {x = 25, y = 30},
        {x = 30, y = 30},
        {x = 35, y = 30},
        {x = 40, y = 30},
        {x = 10, y = 20},
        {x = 15, y = 20},
        {x = 20, y = 20},
        {x = 25, y = 20},
        {x = 30, y = 20},
        {x = 35, y = 20},
        {x = 40, y = 20},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25},
        {x = 10, y = 25},
        {x = 15, y = 25},
        {x = 20, y = 25},
        {x = 25, y = 25},
        {x = 30, y = 25},
        {x = 35, y = 25},
        {x = 40, y = 25}
    }

    local given_result = agc.ovalfill(5, 5, 3, 5)

    luaunit.assertEquals(given_result, expected_result)
end


--[[ End of TestGeometryCalculations ]]


os.exit(luaunit.LuaUnit.run())

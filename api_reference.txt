------------------
---------- TEXT --
------------------


Text manipulation.


Write(x, y, s, [color])
=======================

    Function Write uses Love2D's print function under the hood,
    but it does not expose all of its arguments to the user.
    Rotation, scaling, and offset are set to Love2D's defaults.

    Currently, coordinates are passed 1:1 because pixel scaling
    is not implemented yet.

    Arguments
    ---------
    x : number
        Position of the text beginning at the x-axis.
    y : number
        Position of the text beginning at the y-axis.
    s : string
        Text to be printed. It has to be a valid ASCII string.
    color : palette.<color>
        Color of the text. Defaults to the default foreground color.

    Returns
    -------
    nothing


Join(ss, [delimiter])
=====================

    The Join function joins multiple strings into a single string.
    It is provided to make joining a larger amount of strings into
    a single string easier than using the `..` operator.

    Arguments
    ---------
    ss : array of strings
        A single table with all ASCII strings to be joined, e.g.
        {"text1", "text2"}.
    delimiter : string = ""
        An optional argument that specifies what symbol or text
        will be added between the joined strings.
        It defaults to an empty string.

    Returns
    -------
    string


Split(s, [delimiter])
=====================

    The Split function takes a single string and a delimiter
    as arguments, and tries to split the string on the delimiter.
    If the delimiter is not provided, it defaults to a single space.
    If the delimiter is set to an empty string, this function
    returns the string passed without any changes.

    Arguments
    ---------
    s : string
        The text to be split.  It has to be a valid ASCII string.
    delimiter : string = " "
        The delimiter used to split the string. It defaults
        to a space.

    Returns
    -------
    {strings}


Sub(s, i, j)
============

    The Sub function takes a single string as an argument and
    the numbers i and j that define the range of the substring.

    Arguments
    ---------
    s : string
        Base string.  It has to be a valid ASCII string.
    i : number
        Start of the substring (i included).
    j : number
        End of the substring (j included). Must be positive.

    Returns
    -------
    string


--------------------
---------- SCREEN --
--------------------


Functions related to the game screen.


Cls()
=====

    The Cls function clears the entire game screen.

    Arguments
    ---------
    No arguments are passed

    Returns
    -------
    nothing


----------------------
---------- GEOMETRY --
----------------------


Functions that puts the various geometric shapes on the screen.


Pset(x, y, [color])
===================

    The Pset function draws a new pixel on the screen. It uses
    user-specified coordinates and color.

    Arguments
    ---------
    x : number
        The position of the pixel on the horizontal axis.
    y : number
        The position of the pixel on the vertical axis.
    color : palette.<color>
        The color of the pixel to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Line(sx, sy, tx, ty, [color])
=============================

    The Line function draws a line using Bresenham's algorithm
    from {sx, sy} to {tx, ty}.

    Arguments
    ---------
    sx : number
        The position of the starting point on the x-axis.
    sy : number
        The position of the starting point on the y-axis.
    tx : number
        The position of the end point on the x-axis.
    ty : number
        The position of the end point on the y-axis.
    color : palette.<color>
        The color of the line to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Rect(x, y, w, h, [color])
=========================

    The Rect function creates an empty (i.e., not filled)
    rectangle on the screen.

    Arguments
    ---------
    x : number
        The position of the top-left rectangle corner on the x-axis.
    y : number
        The position of the top-left rectangle corner on the y-axis.
    w : number
        The width of the rectangle.
    h : number
        The height of the rectangle.
    color : palette.<color>
        The color of the rectangle to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Rectfill(x, y, w, h, [color])
=============================

    The Rectfill function draws a filled rectangle on the screen.

    Arguments
    ---------
    x : number
        The position of the top-left rectangle corner on the x-axis.
    y : number
        The position of the top-left rectangle corner on the y-axis.
    w : number
        The width of the rectangle.
    h : number
        The height of the rectangle.
    color : palette.<color>
        The color of the rectangle to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Circ(x, y, r, [color])
======================

    The Circ function creates an empty (i.e., not filled) circle
    on the screen. It uses the midpoint circle algorithm.

    Arguments
    ---------
    x : number
        The position of the circle center on the x-axis.
    y : number
        The position of the circle center on the y-axis.
    r : number
        The radius of the circle.
    color : palette.<color>
        The color of the circle to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Circfill(x, y, r, [color])
==========================

    The Circfill function draws a filled circle on the screen.
    It reuses the Circ function for the borders, and then adds
    the coloring.

    Arguments
    ---------
    x : number
        The position of the circle center on the x-axis.
    y : number
        The position of the circle center on the y-axis.
    r : number
        The radius of the circle.
    color : palette.<color>
        The color of the circle to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Oval(x, y, rx, ry, [color])
===========================

    The Oval function draws an empty (i.e., not filled) ellipse
    on the screen. It uses the midpoint ellipse algorithm.

    Arguments
    ---------
    x : number
        The position of the ellipse center on the x-axis.
    y : number
        The position of the ellipse center on the y-axis.
    rx : number
        The length of the radius on the x-axis.
    ry : number
        The length of the radius on the y-axis.
    color : palette.<color>
        The color of the ellipse to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


Ovalfill(x, y, rx, ry, [color])
===============================

    The Ovalfill function draws a filled ellipse on the screen.
    It uses a slightly modified midpoint ellipse algorithm.

    Arguments
    ---------
    x : number
        The position of the ellipse center on the x-axis.
    y : number
        The position of the ellipse center on the y-axis.
    rx : number
        The length of the radius on the x-axis.
    ry : number
        The length of the radius on the y-axis.
    color : palette.<color>
        The color of the ellipse to be created. It defaults
        to the default foreground color.

    Returns
    -------
    nothing


----------------------
---------- SPRITES --
----------------------


Spr(x, y, num)
==============

    The Spr function allows to draw a sprite on on the specific coordinates.
    Please note that this function, unlike its equivalent from PICO-8,
    does not allow to specify a range of sprites to draw.

    Arguments
    ---------
    x : number
        Position of top-left sprite corner on the x axis.
    y : number
        Position of top-left sprite corner on the y axis.
    num : number
        Number of sprite in the spreadsheet. You should be able to
        determine sprite number looking at the GUI of the sprites
        editor.

    Returns
    -------
    nothing


-------------------
---------- INPUT --
-------------------


Functions related to game input.
Currently only keyboard input is supported.


Btn(button)
===========

    The Btnp function sets the repeat mode to true, then checks
    if the button passed as an argument is down.

    Arguments
    ---------
    button : Love2d.KeyConstant
        It should be a valid KeyConstant value provided by Love2D.

    Returns
    -------
    boolean
        It returns true if the button passed as an argument
        is pressed, false otherwise.


Btnp(button)
============

    The Btnp function sets the repeat mode to false, then checks
    if the button passed as an argument is down.

    Arguments
    ---------
    button : Love2d.KeyConstant
        It should be a valid KeyConstant value provided by Love2D.

    Returns
    -------
    boolean
        It returns true if the button passed as an argument
        is pressed, false otherwise.


Brpt(enabled)
=============

    The Brpt function allows you to manually set the key repeat mode
    to true (enabling repeating keypress on hold) or false
    (disabling repeating keypress on hold).

    Arguments
    ---------
    enabled : boolean
        It enables or disables the repeat-key-on-hold. It is passed
        to the Love2D function.

    Returns
    -------
    nothing


--------------------
---------- COLORS --
--------------------

There are 8 main colors, and every color has a "Bold" (brighter) version. The Palette uses color names from the classic 16-color
terminal palette, but the colors themselves are not a totally
accurate reflection of the original terminal colors.

Actually, the palette scheme is a slightly modified Japanesque
palette.

Every color consists of 4 values: red, blue, green, and alpha.
Every value must be between 0 and 1.

It is possible to create new colors and pass them to API functions.


Color = {r 0..1, g 0..1, b 0..1, alpha 0..1}
============================================

Black      = {0.118, 0.118, 0.118, 1.0}
BlackBold  = {0.38,  0.439, 0.498, 1.0}
Blue       = {0,     0.251, 0.502, 1.0}
BlueBold   = {0.2,   0.6,   1.0,   1.0}
Cyan       = {0.216, 0.451, 0.459, 1.0}
CyanBold   = {0.443, 0.525, 0.584, 1.0}
Green      = {0.282, 0.282, 0.459, 1.0}
GreenBold  = {0.427, 0.502, 0.71,  1.0}
Pink       = {0.294, 0.451, 0.627, 1.0}
PinkBold   = {0.439, 0.537, 0.78,  1.0}
Red        = {0.059, 0.09,  0.745, 1.0}
RedBold    = {0.157, 0.188, 0.969, 1.0}
Yellow     = {0.102, 0.533, 0.8,   1.0}
YellowBold = {0.145, 0.694, 0.969, 1.0}
White      = {0.443, 0.529, 0.592, 1.0}
WhiteBold  = {0.639, 0.831, 0.902, 1.0}
